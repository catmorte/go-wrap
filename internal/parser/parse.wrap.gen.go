// Code generated by "go-wrap"; DO NOT EDIT.
package parser

import (
	"go/ast"

	"github.com/catmorte/go-wrap/internal/declaration"
	. "github.com/catmorte/go-wrap/pkg/wrap"
	"golang.org/x/tools/go/packages"
)

func loadPackagesWrap(arg0 string, arg1 *packages.Config) Out[[]*packages.Package] {
	return Wrap(loadPackages(arg0, arg1))
}

func (rcv packageParser) extractRawCodeWrap(arg0 any) Out[string] {
	return OK(rcv.extractRawCode(arg0))
}

func (rcv packageParser) parseErrorWrap(arg0 packages.Error) Out[*declaration.Error] {
	return OK(rcv.parseError(arg0))
}

func (rcv packageParser) newTypeWrap(arg0 *ast.Field) Out[*declaration.Type[Empty]] {
	return OK(rcv.newType(arg0))
}

func (rcv packageParser) newTypeParamsWrap(arg0 *ast.Field) Out[*declaration.Type[declaration.ParamMeta]] {
	return OK(rcv.newTypeParams(arg0))
}

func (rcv packageParser) newTypeTypeArgWrap(arg0 *ast.Field) Out[*declaration.Type[declaration.TypeMeta]] {
	return OK(rcv.newTypeTypeArg(arg0))
}

func newPackageParserWrap(arg0 *packages.Package) Out[packageParser] {
	return OK(newPackageParser(arg0))
}

func unquoteWrap(arg0 string) Out[string] {
	return Wrap(unquote(arg0))
}

func parseFieldsWrap[T any](arg0 *ast.FieldList, arg1 func(f *ast.Field) *declaration.Type[T]) Out[[]*declaration.Type[T]] {
	return OK(parseFields(arg0, arg1))
}

func filterFuncDeclsWrap(arg0 []ast.Decl) Out[[]*ast.FuncDecl] {
	return OK(filterFuncDecls(arg0))
}

func (rcv packageParser) newFuncWrap(arg0 *ast.FuncDecl) Out[*declaration.Func] {
	return OK(rcv.newFunc(arg0))
}

func (rcv packageParser) newFileWrap(arg0 string, arg1 []*declaration.Func, arg2 []*declaration.Import) Out[*declaration.File] {
	return OK(rcv.newFile(arg0, arg1, arg2))
}

func (rcv packageParser) newPackageWrap(arg0 []*declaration.Error, arg1 []*declaration.File) Out[*declaration.Package] {
	return OK(rcv.newPackage(arg0, arg1))
}

func (rcv packageParser) newImportWrap(arg0 *ast.ImportSpec) Out[*declaration.Import] {
	return Wrap(rcv.newImport(arg0))
}
